cd .. will move us back one level in hierarchy
clear -> clears terminal history
nano -> open and update files in bash terminal
open . -> mac command to open file browser
start . -> windows command to open file browser
touch: create a file (ex sample.doc)
tab to autocomplete in terminal
start sample.doc will open that file
ls -a -> list contents of a directory including hidden files
code . -> open current directory in VS Code
open txt file in VS Code from command line
code sample.txt
cat -> print contents of a file
      
basic command line: cd, cwd, pwd, ls (list contents), dir (list contents)

mkdir -> makes a new directory (folder) in the cwd

cd -> change directory
cd .. -> move up one directory
cd ~ -> move to home directory
cd / -> move to root directory
cd /Users/ -> move to Users directory
cd /Users/username/ -> move to username directory
mkdir -> make a new directory
mkdir newdir -> make a new directory called newdir
mkdir newdir1 newdir2 -> make two new directories
mkdir -p newdir1/newdir2 -> make a new directory inside another directory
rm -> remove a file
rm sample.doc -> remove a file called sample.doc
rm -r newdir1 -> remove a directory called newdir1
rm -r newdir1 newdir2 -> remove two directories
rm -rf newdir1 -> remove a directory called newdir1 without asking for confirmation


cwd -> current working directory
pwd -> print working directory
pwd -P -> print physical working directory
pwd -L -> print logical working directory


#add a branch to the repository
git branch branchname
#switch to a branch
git checkout branchname
#add a file to the staging area


touch -> create a new file
touch sample.doc -> create a new file called sample.doc
touch sample1.doc sample2.doc -> create two new files
touch -a sample.doc -> update the access time of sample.doc
touch -m sample.doc -> update the modification time of sample.doc
touch -t 201801010000 sample.doc -> set the modification time of sample.doc to 1/1/2018 at midnight

cp -> copy a file
cp sample.doc sample2.doc -> copy sample.doc to sample2.doc
cp sample.doc newdir1/sample2.doc -> copy sample.doc to newdir1/sample2.doc 
cp -r newdir1 newdir2 -> copy newdir1 to newdir2
cp -r newdir1 newdir2/newdir3 -> copy newdir1 to newdir2/newdir3

mv -> move a file
mv sample.doc sample2.doc -> move sample.doc to sample2.doc
mv sample.doc newdir1/sample2.doc -> move sample.doc to newdir1/sample2.doc
mv newdir1 newdir2 -> move newdir1 to newdir2
mv newdir1 newdir2/newdir3 -> move newdir1 to newdir2/newdir3
# move from one directory to another
mv sample.doc newdir1/sample2.doc -> move sample.doc to newdir1/sample2.doc

pwd -> print working directory
pwd -P -> print physical working directory
pwd -L -> print logical working directory

ls -> list contents of a directory
ls -a -> list all contents of a directory
ls -l -> list contents of a directory in long format
ls -t -> list contents of a directory sorted by modification time
ls -r -> list contents of a directory in reverse order
ls -R -> list contents of a directory and all subdirectories
ls -1 -> list contents of a directory in one column
ls -m -> list contents of a directory separated by commas
ls -F -> list contents of a directory with a trailing slash after directories
ls -S -> list contents of a directory sorted by file size
ls -X -> list contents of a directory sorted by extension
ls -U -> list contents of a directory in unsorted order
ls -d -> list only directories
ls -h -> list contents of a directory in human readable format
ls -H -> list contents of a directory in human readable format with base 1000
ls -i -> list contents of a directory with inode number
ls -n -> list contents of a directory with numeric uid and gid
ls -s -> list contents of a directory with file size in blocks
ls -x -> list contents of a directory sorted by columns
ls -A -> list all contents of a directory except . and ..
ls -C -> list contents of a directory in columns
ls -q -> list contents of a directory in non-printing characters
ls -Q -> list contents of a directory in non-printing characters with quotes
ls -u -> list contents of a directory sorted by access time

cat -> concatenate files and print on the standard output
cat sample.doc -> print the contents of sample.doc
cat sample1.doc sample2.doc -> print the contents of sample1.doc and sample2.doc
cat -n sample.doc -> print the contents of sample.doc with line numbers
cat -b sample.doc -> print the contents of sample.doc with non-blank line numbers
cat -s sample.doc -> print the contents of sample.doc with blank lines removed
cat -E sample.doc -> print the contents of sample.doc with $ at the end of each line

head -> output the first part of files
head sample.doc -> output the first 10 lines of sample.doc
head -n 5 sample.doc -> output the first 5 lines of sample.doc
head -c 5 sample.doc -> output the first 5 bytes of sample.doc
head -q sample.doc -> output the first 10 lines of sample.doc without headers

tail -> output the last part of files
tail sample.doc -> output the last 10 lines of sample.doc
tail -n 5 sample.doc -> output the last 5 lines of sample.doc
tail -c 5 sample.doc -> output the last 5 bytes of sample.doc


grep -> search for a pattern in a file
grep "pattern" sample.doc -> search for a pattern in sample.doc
grep -i "pattern" sample.doc -> search for a pattern in sample.doc ignoring case
grep -v "pattern" sample.doc -> search for a pattern in sample.doc and output lines that do not match
grep -c "pattern" sample.doc -> search for a pattern in sample.doc and output the number of matches
grep -l "pattern" sample.doc -> search for a pattern in sample.doc and output the name of the file

wc -> print newline, word, and byte counts for each file
wc sample.doc -> print newline, word, and byte counts for sample.doc
wc -l sample.doc -> print newline count for sample.doc
wc -w sample.doc -> print word count for sample.doc

sort -> sort lines of text files
sort sample.doc -> sort lines of sample.doc
sort -r sample.doc -> sort lines of sample.doc in reverse order
sort -n sample.doc -> sort lines of sample.doc numerically
sort -k 2 sample.doc -> sort lines of sample.doc based on the second field
sort -k 2,3 sample.doc -> sort lines of sample.doc based on the second and third field

uniq -> report or omit repeated lines
uniq sample.doc -> report or omit repeated lines in sample.doc
uniq -c sample.doc -> report or omit repeated lines in sample.doc with a count of the number of times each line was repeated

cut -> remove sections from each line of files
cut -c 1 sample.doc -> remove all but the first character from each line of sample.doc

paste -> merge lines of files
paste sample1.doc sample2.doc -> merge lines of sample1.doc and sample2.doc

join -> join lines of two files on a common field
join sample1.doc sample2.doc -> join lines of sample1.doc and sample2.doc on the first field

tr -> translate or delete characters
tr "a-z" "A-Z" < sample.doc -> translate lowercase letters to uppercase letters in sample.doc
tr -d "a-z" < sample.doc -> delete lowercase letters in sample.doc

sed -> stream editor for filtering and transforming text
sed "s/pattern/replacement/" sample.doc -> replace all instances of pattern with replacement in sample.doc
sed "s/pattern/replacement/g" sample.doc -> replace all instances of pattern with replacement in sample.doc globally

awk -> pattern scanning and processing language
awk '{print $1}' sample.doc -> print the first field of each line in sample.doc
awk '{print $1, $2}' sample.doc -> print the first and second field of each line in sample.doc
awk '{print $1, $2, $3}' sample.doc -> print the first, second, and third field of each line in sample.doc

find -> search for files in a directory hierarchy
find . -name "sample*" -> search for files in the current directory that start with sample
find . -name "*sample*" -> search for files in the current directory that contain sample
find . -name "*sample" -> search for files in the current directory that end with sample

locate -> search for files in a database
locate sample.doc -> search for files in the database that contain sample.doc

which -> locate a command
which ls -> locate the ls command

whereis -> locate the binary, source, and manual page files for a command

remove all files except
rm -f sample.doc -> remove sample.doc
rm -f sample* -> remove all files that start with sample
rm -f *sample* -> remove all files that contain sample
rm -f *sample -> remove all files that end with sample

remove a branch



remove a directory
rm -rf sample -> remove the sample directory



tar -> create and manipulate tar archives
tar -cvf sample.tar sample.doc -> create a tar archive named sample.tar containing sample.doc
tar -xvf sample.tar -> extract the contents of sample.tar
tar -tvf sample.tar -> list the contents of sample.tar

gzip -> compress or expand files
gzip sample.doc -> compress sample.doc
gzip -d sample.doc.gz -> decompress sample.doc.gz

bzip2 -> compress or expand files
bzip2 sample.doc -> compress sample.doc

zip -> compress or expand files
zip sample.zip sample.doc -> compress sample.doc

unzip -> expand zip archives

rar -> compress or expand files
rar a sample.rar sample.doc -> compress sample.doc

unrar -> expand rar archives

7z -> compress or expand files
7z a sample.7z sample.doc -> compress sample.doc


chmod -> change file mode bits
chmod 777 sample.doc -> change the mode bits of sample.doc to 777

chown -> change file owner and group
chown root sample.doc -> change the owner of sample.doc to root

chgrp -> change file group

chattr -> change file attributes






git notes: 
________
git is a version control system
*keeps track of changes
*allows multiple people to work on the same project
*allows you to go back to previous versions of your project
*runs on local system > no need for network connection

3 main states of a file in git
*modified 
*modified
*committed 

the git commiting workflow
----------------
The basic Git workflow goes something like this:
1. You modify files in your working tree.
2. You selectively stage just those changes you want to be part of your next commit, which adds
only those changes to the staging area.
* add . > adds all files to the staging area
* add filename.extension > adds select files to the staging area
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot
permanently to your Git directory.

If a particular version of a file is in the Git directory, it’s considered committed. If it has been
modified and was added to the staging area, it is staged. And if it was changed since it was checked
out but has not been staged, it is modified. 

git add . -> add all files to the staging area
git commit -m "message" -> commit all files in the staging area with a message
git push -> push all commits to the remote repository

git help <verb> -> show help for a specific git verb
*ex: git help config 
git <verb> --help -> show help for a specific git verb
* git config --help

getting setup with git
----------------------------------------------------------------
If you have a project directory that is currently not under version control and you want to start
controlling it with Git, you first need to go to that project’s directory. If you’ve never done this, it
looks a little different depending on which system you’re running:

cd to file location, then the following commands will be run to initialize and start version-controlling the project
git init -> this creates a .git subdirectory in the current directory (hidden files have a . in front of them)
* can view hidden files in the current directory -> dir -a --or-- dir --all
git add *.C -> *.C is a file glob 
git add LICENSE
git commit -m "initial project version"

recording changes to the repository
----------------------------------------------------------------
at this point we have a bona fide git repo on local machine, and a checkout (or working copy) of the files in front of you
*git repo is a directory that contains all the files for a project, as well as the entire history of revisions to those files
*checkout is a copy of the project files that are currently being worked on

at this point, we will start making changes and committing snapshots of those changes to our repo each time the project reaches
a state we want to record
* recall that each file can be in one of 2 states: tracked or untracked
* tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged > tracked files are the files
that git knows about

* untracked files are everything else; these are any files in the working directory that were not in the last snapshot and are not known to git 


checking the status of the files
----------------
git status -> show the status of the repository
* The main tool you use to determine which files are in which state
* will be unmodified, modified, and staged > tracked files are the files that git knows about; untracked are files not known to git
* untracked files are files git did not see in the last snapshot

staging untracked files
----------------
adding a file to the working directory will result in an untracked file in the working directory
* git status will show the file as untracked
ex: 
touch README 
git status -> README is untracked
Untracked files:
  (use "git add <file>..." to include in what will be committed)
  README

to begin tracking the file, we use git add <file>
* this will move the file from untracked to staged

staging modification
----------------
* if we modify a file that is already tracked, git status will show the file as modified
ex:



----------------
git init -> initialize a git repository
git add . -> add all files to the staging area
git commit -m "message" -> commit all files in the staging area with a message
git status -> show the status of the repository


cloning a git repository
----------------
git clone <url> -> clone a repository into a new directory
git clone <url> <new directory name> -> clone a repository into a specific directory


git head 
--------------------------------
git head > points to the current branch (the last commit in the branch)
* the HEAD pointer is a reference to the last commit in the currently checked out branch
* commit hash is the hash of the commit that HEAD points to

git branching
* this is gits killer feature
Nearly every VCS has some form of branching support. 
Branching means you diverge from the main line of development and 
continue to do work without messing with that main line. 
In many VCS tools, this is a somewhat expensive process, 
often requiring you to create a new copy of your source code directory, 
which can take a long time for large projects.

*recall that git stores data as a series of snapshots

----------------
git branch -> show all branches
git branch branch_name -> create a new branch
git checkout branch_name -> switch to a branch
git checkout -b branch_name -> create and switch to a branch
git merge branch_name -> merge a branch into the current branch
git branch -d branch_name -> delete a branch
#active branch will have an asterisk next to it

git head > points to the current branch (the last commit in the branch)

git diff > show unstaged changes
----------------
* git diff shows the difference between the working directory and the staging area (only items not in the staging area)
git diff -> show the difference between the working directory and the staging area
  * another way to think of this is showing the things that we have not staged yet 
  (the changes we have made that we have not added to the staging area)
  * if git diff is blank then we have nothing that has not been staged
  * file must be tracked to be able to use git diff
git diff --staged -> show the difference between the staging area and the repository
git diff HEAD -> show the difference between the working directory and the repository

git diff output: 
* the first line shows the files being compared (usually both are the same file and we are comparing them at different points in time)
* the second line shows index and the commit hash
* then we see 2 lines of marker (changes in file a will be indicated with -- and changes in file b will be indicated with ++)
* then we see the chunks of changes (just a sample of the changes - not every line of our code)
 * chunk header ex: @@ -1,3 +1,4 @@ > -1,3 refers to the first file and +1,4 refers to the second file
  * -1,3 means the chunk starts at line 1 and is 3 lines long
  * +1,4 means the chunk starts at line 1 and is 4 lines long
what is the source of the information above?
* the source of the information is the diff algorithm
* the diff algorithm is a tool that compares 2 files and outputs the differences between them
* the diff algorithm is used by git to compare files and output the differences between them


Example: 
$ git diff --staged

diff --git a/songs.txt b/songs.txt
index b7b2867..ed5a22d 100644
--- a/songs.txt
+++ b/songs.txt
@@ -2,3 +2,4 @@ git song 1
 song 2
 hit em up
 ca love
+brenda

git diff --cached -> show the difference between the staging area and the repository
* this is simply an alias for git diff --staged

can specify a file to see the difference between the working directory and the staging area
ex: git diff README.md -> show the difference between the working directory 
and the staging area for README.md

- keyboard shortcut to reset git terminal state
- ctrl + c -> reset git terminal state


----------------



git tracks the current directory and all subdirectories
everything nested inside the current directory is tracked
all files will be tracked

***do not initialize repo inside another repo
do not initialize repo inside a directory that is already being tracked
run git status to check if a directory is being tracked
if directory is being tracked, back out and     initialize repo in a different directory

the git commiting workflow
----------------
The basic Git workflow goes something like this:
1. You modify files in your working tree.
2. You selectively stage just those changes you want to be part of your next commit, which adds
only those changes to the staging area.
* add . > adds all files to the staging area
* add filename.extension > adds select files to the staging area
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot
permanently to your Git directory.

If a particular version of a file is in the Git directory, it’s considered committed. If it has been
modified and was added to the staging area, it is staged. And if it was changed since it was checked
out but has not been staged, it is modified. 

git add . -> add all files to the staging area
git commit -m "message" -> commit all files in the staging area with a message
git push -> push all commits to the remote repository

add and commit in one line
----------------
git commit -am "message" -> add and commit in one line

git merging
----------------
git merge branch_name -> merge a branch into the current branch
* git merge is used to combine the changes from one branch into another

* common practice is to treat master/main branch as the source of truth
* do experimental work on feature branches before merging back into master/main
* some people refer to master as the trunk > this is the most stable version of the code
* we merge branches, not specific commits
* we always merge to the head of the branch

common merge workflow: 
1. create a new branch
2. make changes on the new branch
3. switch to master
4. merge the new branch into master

common sources of merge conflicts: 
1. different people making changes to the same line of the same file
2. different people deleting the same file
3. different people renaming the same file

fast-forward merge: (simple merge to perform-merely moves pointer forward)
* when the branch being merged in does not have any new commits, 
git will simply move the pointer forward
* this is a simple, non-destructive merge
* fast forward moves the pointer forward to the latest commit

if commits have been made on master and we do not have them on our feature branch,

merge commits: 
* when the branch being merged in has new commits,
git will create a new commit that combines the two histories
* this is a new commit that has two unique parents (as opposed to fast forward which has one parent)
* merge commits are more complex than fast forward merges

ex workflow for merge conflicts:
1. create a new branch
2. make changes on the new branch
3. switch to master
4. make changes on master
5. merge the new branch into master
6. resolve merge conflicts
*remove the lines that git added to indicate the merge conflict
*make the changes we want to keep
*add and commit the resolved files


git add filename.extension
git commit -m "message"
*switch to master branch and merge feature branch
git checkout master
git merge feature_branch_name
*if there are merge conflicts, resolve them
*add and commit the resolved files

we may get the hint error message:  "hint: Updates were rejected because the tip of 
your current branch is behind"
* this means that the branch we are trying to merge into is not up to date
* we need to pull the latest changes from the remote repository
* we can do this by running git pull origin master
* this will pull the latest changes from the remote repository and merge them into our local repository
git will automatically try to merge our commits, but we may run into merge conflicts:
merge conflicts must be manually resolved before we can commit the changes
we have to open files where merge conflicts exist and manually resolve the conflicts


git tagging
----------------
git tag -> show all tags
git tag tag_name -> create a new tag
git tag -a tag_name -m "message" -> create a new annotated tag
git tag -d tag_name -> delete a tag
git show tag_name -> show tag information
*we can use tags to mark specific points in the history of a project
*one such use case is to mark a release

pushing to github
----------------
git remote add origin
git push -u origin master


pulling from github
----------------
git pull origin master

adding github url
----------------
git remote add origin

cloning a repo from github
----------------
git clone


changes not staged for commit 
----------------    
git add . -> add all files to the staging area
git commit -m "message" -> commit all files in the staging area with a message
git push -> push all commits to the remote repository

added 

git config settings 
----------------
git config --list -> shows list of config settings
git config --global user.name "username"
git config --global user.email "email"

git config --global core.editor "vim" -> set vim as the default editor
git config --global core.editor "nano" -> set nano as the default editor
git config --global core.editor "code" -> set code as the default editor (vscode) 

amending commits 
----------------
git commit --amend -m "message" -> amend the last commit with a new message

#add a file to the last commit
git add filename.extension
git commit --amend --no-edit

git ignore
--
touch .gitignore -> create a .gitignore file
echo "filename.extension" >> .gitignore -> add a file to the .gitignore file
echo "directoryname/" >> .gitignore -> add a directory to the .gitignore file
echo "directoryname/*" >> .gitignore -> add all files in a directory to the .gitignore file


resolving merge conflicts > we can resolve merge conflicts by 
opening the files that have merge conflicts and manually resolving the conflicts
* remove the lines that git added to indicate the merge conflict (<<<<<<< HEAD, =======, >>>>>>>)
* make the changes we want to keep
* add and commit the resolved files

we can also use vscode to resolve merge conflicts
* open the file that has a merge conflict
* vscode will show the merge conflict in the editor
* we can use the editor to resolve the merge conflict
* we can also use the command line to resolve merge conflicts
* we can use the command line to resolve merge conflicts by opening the file that has a merge conflict


Github Basics: 
---------------
We can push code from local machine UP to cloud (github)
Then, we can pull the repository DOWN 
all of this means we can collaborate at scale 
***we give our code a home in the cloud 

Cloning: 
----------------
to clone a repository, we use the git clone command
git clone url -> clone a repository from a url
this will create a new directory with the same name as the repository
this directory will contain all of the files in the repository
we can also clone a repository from a local path
cloning gives us access to the full commit history of the repository
git clone path -> clone a repository from a local path

git clone
git clone url -> clone a repository from a url
git clone path -> clone a repository from a local path





